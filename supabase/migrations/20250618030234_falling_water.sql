/*
  # Create admin_users table

  1. New Tables
    - `admin_users`
      - `id` (bigint, primary key, auto-increment)
      - `username` (text, unique, not null)
      - `password` (text, not null)
      - `role` (text, not null, default 'مشرف')
      - `created_at` (timestamp with time zone, default now())
      - `updated_at` (timestamp with time zone, default now())

  2. Security
    - Enable RLS on `admin_users` table
    - Add policies for admin operations

  3. Initial Data
    - Insert default admin user with username 'dark' and password 'dark'
    - Insert additional admin users for testing
*/

-- Create the admin_users table
CREATE TABLE IF NOT EXISTS public.admin_users (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username text NOT NULL UNIQUE,
    password text NOT NULL,
    role text NOT NULL DEFAULT 'مشرف',
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);

-- Enable Row Level Security
ALTER TABLE public.admin_users ENABLE ROW LEVEL SECURITY;

-- Create policies for admin_users table
-- Note: These are basic policies - you may want to adjust based on your security requirements
CREATE POLICY "Allow all operations for admin_users"
    ON public.admin_users
    FOR ALL
    TO public
    USING (true)
    WITH CHECK (true);

-- Insert default admin users
INSERT INTO public.admin_users (username, password, role) VALUES 
    ('dark', 'dark', 'مدير عام'),
    ('admin', 'admin123', 'مدير عام'),
    ('moderator', 'mod123', 'مشرف'),
    ('programmer', 'prog123', 'مبرمج')
ON CONFLICT (username) DO NOTHING;

-- Create an update trigger for updated_at column
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Apply the trigger to admin_users table if it doesn't already exist
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_trigger 
        WHERE tgname = 'update_admin_users_updated_at'
    ) THEN
        CREATE TRIGGER update_admin_users_updated_at
            BEFORE UPDATE ON public.admin_users
            FOR EACH ROW
            EXECUTE FUNCTION update_updated_at_column();
    END IF;
END $$;